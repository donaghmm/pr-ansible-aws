---

- hosts: localhost
  tasks:
    - name: Get my current IP address
      uri:
        url: http://checkip.amazonaws.com/
        return_content: yes
      register: my_ip

    - name: Create simple security group
      ec2_group:
        name: webservers
        description: We need to to be secure lets whitelist our ip range
        region: us-west-2
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
        rules_egress:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: webservers_group

    - name: Create the ELB listening over port 80
      ec2_elb_lb:
        name: "{{ application }}-load-balancer"
        state: present
        region: us-west-2
        zones:
          - us-west-2a
          - us-west-2c
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: elb

    - name: Create Launch Configuration
      ec2_lc:
        name: "{{ application }}-lc"
        key_name: sd
        instance_type: t2.nano
        image: ami-0def3275
        region: us-west-2
        group_id:
          - "{{ webservers_group.group_id }}"
          - "{{ elb.elb.security_group_ids | first }}"
        wait: yes
        instance_tags:
          application: "{{ application }}"

    - name: Create EC2 instances
      ec2:
        key_name: sd
        instance_type: t2.nano
        image: ami-0def3275
        region: us-west-2
        group_id:
          - "{{ webservers_group.group_id }}"
          - "{{ elb.elb.security_group_ids | first }}"
        wait: yes
        instance_tags:
          application: "{{ application }}"
        exact_count: "{{ instance_count }}"
        count_tag:
          application: "{{ application }}"
      register: ec2_instances

    - name: Store EC2 instance IPs to provision against
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ec2_instance_ips
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Wait for servers to come online
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 300
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Add EC2 instances as known hosts
      known_hosts:
        name: "{{ item.public_ip }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
      with_items: "{{ ec2_instances.tagged_instances }}"


- hosts: ec2_instance_ips
  remote_user: ubuntu
  become: yes
  become_method: sudo
  roles:
    - { role: tomcat }
  tasks:
    - name: Install apache
      apt:
        name: apache2
        state: present
    - name: Copy the configuration apache2 for proxying AJP Tomcat
      copy: src=default dest=/etc/apache2/sites-available/default mode=0755
    - name: Create default index page
      copy:
        dest: /var/www/index.html
        content: "Howdy from {{ ansible_hostname }}"
    - name: Restart apache
      service:
        name: apache2
        state: restarted


- hosts: localhost
  tasks:
    - name: Add each EC2 instance to the ELB
      ec2_elb:
        state: present
        ec2_elbs: "{{ application }}-load-balancer"
        region: "{{ item.region }}"
        instance_id: "{{ item.id }}"
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Retrieve current Auto Scaling Group properties
      command: "aws --region us-west-2 autoscaling describe-auto-scaling-groups --auto-scaling-group-names {{ application }}-load-balancer"
      register: asg_properties_result

    - name: Set asg_properties variable from JSON output if the Auto Scaling Group already exists
      set_fact:
        asg_properties: "{{ (asg_properties_result.stdout | from_json).AutoScalingGroups[0] }}"
      when: (asg_properties_result.stdout | from_json).AutoScalingGroups | count

    - name: Configure Auto Scaling Group and perform rolling deploy
      ec2_asg:
        region: "us-west-2"
        name: webapp
        launch_config_name: "{{ application }}-lc"
        availability_zones: "us-west-2a"
        health_check_type: ELB
        health_check_period: 300
        desired_capacity: "{{ asg_properties.DesiredCapacity | default(2) }}"
        replace_all_instances: yes
        replace_batch_size: "{{ (asg_properties.DesiredCapacity | default(2) / 4) | round(0, 'ceil') | int }}"
        min_size: 2
        max_size: 10
        load_balancers:
          - "{{ application }}-load-balancer"
        state: present
      register: asg_result
    
    - name: Configure Scaling Policies
      ec2_scaling_policy:
        region: "us-west-2"
        name: "{{ item.name }}"
        asg_name: webapp
        state: present
        adjustment_type: "{{ item.adjustment_type }}"
        min_adjustment_step: "{{ item.min_adjustment_step }}"
        scaling_adjustment: "{{ item.scaling_adjustment }}"
        cooldown: "{{ item.cooldown }}"
      with_items:
        - name: "Increase Group Size"
          adjustment_type: "ChangeInCapacity"
          scaling_adjustment: +1
          min_adjustment_step: 1
          cooldown: 180
        - name: "Decrease Group Size"
          adjustment_type: "ChangeInCapacity"
          scaling_adjustment: -1
          min_adjustment_step: 1
          cooldown: 300
      register: sp_result
    
    - name: Determine Metric Alarm configuration
      set_fact:
        metric_alarms:
          - name: "{{ asg_name }}-ScaleUp"
            comparison: ">="
            threshold: 50.0
            alarm_actions:
              - "{{ sp_result.results[0].arn }}"
          - name: "{{ asg_name }}-ScaleDown"
            comparison: "<="
            threshold: 20.0
            alarm_actions:
              - "{{ sp_result.results[1].arn }}"
    
    - name: Configure Metric Alarms and link to Scaling Policies
      ec2_metric_alarm:
        region: "us-west-2"
        name: "{{ item.name }}"
        state: present
        metric: "CPUUtilization"
        namespace: "AWS/EC2"
        statistic: "Average"
        comparison: "{{ item.comparison }}"
        threshold: "{{ item.threshold }}"
        period: 60
        evaluation_periods: 5
        unit: "Percent"
        dimensions:
          AutoScalingGroupName: "{{ asg_name }}"
        alarm_actions: "{{ item.alarm_actions }}"
      with_items: metric_alarms
      when: max_size > 1
      register: ma_result



